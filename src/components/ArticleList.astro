---
import type { HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'

import TagList from '@components/TagList.astro'
import Icon from '@components/Icon.astro'

interface Props extends HTMLAttributes<'ul'> {
  source: CollectionEntry<'blog'>[]
}

const { source, ...attrs } = Astro.props
---

<ul class="blog-list" {...attrs}>
  {
    source.map(({ slug, data }) => (
      <li class="blog-listitem">
        <article class="blog-article">
          <div class="blog-date-wrap">
            <p class="blog-publishedAt">
              <span class="u-visualy-hidden">投稿日</span>
              <time datetime={data.publishedAt}>{data.publishedAt}</time>
            </p>
            {data.updatedAt && (
              <p class="blog-updatedAt">
                <Icon name="update" size={16} />
                <span class="u-visualy-hidden">更新日</span>
                <time datetime={data.updatedAt}>{data.updatedAt}</time>
              </p>
            )}
          </div>
          <h3 class="blog-title" id={`${slug}-title`}>
            <a href={`/blog/${slug}`} class="blog-listitem-link">
              {data.title}
            </a>
          </h3>
          <p id={`${slug}-desc`}>{data.summary}</p>
          <div class="blog-listitem-tags">
            <TagList tags={data.tags} />
          </div>
        </article>
      </li>
    ))
  }
</ul>

<style>
  /* ネガティブマージンで拡げる */
  .blog-list:is([data-expand='true']) {
    margin: -2rem;
  }

  .blog-listitem {
    display: grid;
    grid-template-columns: 1fr auto;
    column-gap: 0.5rem;
    align-items: center;
    padding: 2rem;

    + & {
      border-block-start: var(--border-style);
    }

    &::after {
      inline-size: 0.7rem;
      aspect-ratio: 1;
      content: '';
      border-block-start: solid 1px currentcolor;
      border-inline-end: solid 1px currentcolor;
      rotate: 45deg;
    }

    @media (any-hover: hover) {
      &:hover {
        background-color: var(--blog-item-hover-color);
      }
    }

    &:focus-visible {
      background-color: var(--blog-item-hover-color);
    }
  }

  .blog-article {
    position: relative;
  }

  .blog-date-wrap {
    display: block flex;
    column-gap: 1rem;
    align-items: center;
  }

  :is(.blog-publishedAt, .blog-updatedAt) {
    display: inline flex;
    column-gap: 0.25rem;
    align-items: center;
    color: var(--font-color-muted);
  }

  .blog-updatedAt {
    color: currentcolor;
  }

  .blog-title {
    margin-block-start: 0.25rem;
  }

  .blog-article :where(time, p) {
    --clamp-max: 14;
  }

  .blog-article :where(p):not(.blog-date-wrap p) {
    margin-block-start: 0.5rem;
  }

  .blog-listitem-link {
    color: unset;
    text-decoration: unset;

    &::before {
      position: absolute;
      inset-block-start: -2rem;
      inset-inline-start: -2rem;
      z-index: 1;
      display: block flow;
      inline-size: calc(100% + 4.75rem);
      block-size: calc(100% + 4rem);
      cursor: pointer;
      content: '';
    }
  }

  .blog-listitem-tags {
    margin-block-start: 1rem;
  }

  .blog-archive-link {
    text-align: center;
  }

  .blog-archive-link :where(a) {
    display: block;
    padding-block: 1.5rem;
    color: unset;
    text-decoration: unset;
    border-block-start: var(--border-style);

    &:focus-visible {
      background-color: var(--blog-item-hover-color);
    }

    @media (any-hover: hover) {
      &:hover {
        background-color: var(--blog-item-hover-color);
      }
    }
  }
</style>
