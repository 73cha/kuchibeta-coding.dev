---
import type { GetStaticPaths } from 'astro'
import { getEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import Layout from '@layouts/Layout.astro'
import Container from '@components/Container.astro'
import Breadcrumbs from '@components/Breadcrumbs.astro'
import TagList from '@components/TagList.astro'
import TableOfContents from '@components/partials/blog/TableOfContents.astro'
import ShareButton from '@components/partials/blog/ShareButton.astro'
import Icon from '@components/Icon.astro'

export const getStaticPaths = (async () => {
  const blogCollection = await getCollection('blog')

  return blogCollection.map(({ slug }) => ({
    params: { post_slug: slug },
  }))
}) satisfies GetStaticPaths

const { post_slug } = Astro.params
const { data, render } = await getEntry('blog', post_slug)
const { title, publishedAt, updatedAt, summary, tags } = data
const { Content, headings } = await render()
---

<Layout
  title={title}
  description={summary}
  seo={{
    url: `blog/${post_slug}`,
    imgUrl: 'ogp-blog.png',
    publishedAt: publishedAt,
    schemaType: 'BlogPosting',
  }}
>
  <article class="single">
    <div class="single-title-wrap u-grid-background-img">
      <div class="single-date-wrap">
        <p class="single-publishedAt">
          <span class="u-visualy-hidden">投稿日</span>
          <time datetime={publishedAt}>
            {publishedAt}
          </time>
        </p>
        {
          updatedAt && (
            <p class="single-updatedAt">
              <Icon name="update" size={20} />
              <span class="u-visualy-hidden">更新日</span>
              <time datetime={updatedAt}>{updatedAt}</time>
            </p>
          )
        }
      </div>
      <hgroup>
        <h1 class="single-title">{title}</h1>
        <p class="single-summary">{summary}</p>
      </hgroup>
      <div class="single-tags">
        <TagList tags={tags} />
      </div>
    </div>
    <Container data-size="medium">
      <div class="single-content-wrap">
        <TableOfContents headings={headings} />
        <div class="single-content">
          <Content />
        </div>
      </div>
      <section>
        <h2>記事を共有する</h2>
        <ul class="single-share-buttons">
          <li>
            <ShareButton shareOn="x" text={summary} slug={post_slug} />
          </li>
          <li>
            <ShareButton shareOn="hatena" slug={post_slug} />
          </li>
          <li>
            <ShareButton shareOn="facebook" slug={post_slug} />
          </li>
        </ul>
      </section>
    </Container>
  </article>
  <Breadcrumbs title={title} />
</Layout>

<style>
  .single-title-wrap {
    padding-block: 7rem;
    margin-block-end: -1px;
    background-color: var(--hero-background-color);
    border-block-end: var(--border-style);

    @container main (width <= 640px) {
      padding-block: 3rem;
      padding-inline: 1rem;
    }
  }

  :is(.single-title, .single-summary) {
    inline-size: fit-content;
    margin-inline: auto;
  }

  .single-date-wrap {
    display: block flex;
    column-gap: 1rem;
    place-content: center;
  }

  :is(.single-publishedAt, .single-updatedAt) {
    display: inline flex;
    column-gap: 0.25rem;
    align-items: center;
    color: var(--font-color-muted);
  }

  .single-updatedAt {
    color: currentcolor;
  }

  .single-title {
    --clamp-min: 20;
    --clamp-max: 40;

    margin-block-start: 0.5rem;
  }

  .single-summary {
    margin-block-start: 1rem;
  }

  .single-tags {
    inline-size: fit-content;
    margin-block-start: 1rem;
    margin-inline: auto;
  }

  .single-content-wrap {
    display: grid;
    grid-template-columns: 1fr 360px;

    @container main (inline-size <= 940px) {
      grid-template-columns: unset;
    }
  }

  /* `<Content />`内のセレクターなので、ネストしないとセレクターが生成されない */
  .single-content {
    grid-row: 1 / 2;
    grid-column: 1 / 2;
    padding: 2rem;

    @container main (inline-size <= 940px) {
      grid-row: 2 / 3;
      grid-column: 1 / 2;
      padding: 1rem;
      padding-block-start: unset;
    }

    :where(*):not(
        :is(.rlc-container, .expressive-code, .single-comment, figure) *
      ) {
      &:where(* + *) {
        margin-block-start: 1.5rem;
      }

      &:where(* + h2) {
        margin-block-start: 3.5rem;
      }

      &:where(* + h3) {
        margin-block-start: 2.5rem;
      }

      &:where(* + .rlc-container) {
        margin-block: 2rem 2rem;
      }
    }

    :where(h2) {
      padding: unset;
      padding-block-end: 1rem;
      border: unset;
      border-block-end: var(--border-style);
    }

    :where(code):not(.expressive-code code) {
      padding-inline: 0.25rem;
      background-color: var(--code-background-color);
      border: var(--border-style);
    }

    :where(ul, ol) {
      list-style-position: inside;
      list-style-type: unset;
    }

    :where(figure) {
      margin-block: 2rem 2rem;
    }

    :where(figcaption) {
      --clamp-max: 14;

      margin-block-start: 0.5rem;
      color: var(--font-color-muted);
      text-align: center;
    }

    :where(blockquote) {
      padding-inline-start: 1rem;
      color: var(--font-color-muted);
      border-inline-start: 3px solid currentcolor;
    }

    :where(.expressive-code) {
      --ec-brdCol: var(--border-color) !important;
      --ec-frm-edTabBarBrdCol: var(--border-color) !important;
      --ec-frm-edTabBarBg: transparent !important;
    }

    :where(.rlc-container) {
      display: block grid;
      grid-template-columns: 1fr max-content;
      container: link-card / inline-size;
      color: unset;
      text-decoration: unset;
      background-color: var(--rlc-background-color);
      border: var(--border-style);
      border-radius: 0.25rem;

      @container link-card (inline-size <= 640px) {
        grid-template-columns: unset;
      }

      + & {
        margin-block-start: 1rem;
      }
    }

    :where(.rlc-info) {
      align-self: center;
      padding: 1rem;

      @container link-card (inline-size <= 640px) {
        grid-row: 2 / 3;
        grid-column: 1 / 2;
      }
    }

    :where(.rlc-title) {
      --clamp-min: 16;
      --clamp-max: 18;

      font-weight: bolder;
    }

    :where(.rlc-description) {
      --clamp-max: 14;

      display: -webkit-box;
      margin-block-start: 0.5rem;
      overflow: clip;
      -webkit-box-orient: block-axis;
      -webkit-line-clamp: 2;
    }

    :where(.rlc-url-container) {
      --clamp-max: 14;

      display: block flex;
      gap: 0.5rem;
      align-items: center;
      margin-block-start: 0.5rem;
    }

    /* :where(.rlc-favicon) {}
    :where(.rlc-url) {} */

    :where(.rlc-image-container) {
      min-inline-size: 40cqi;
      contain: strict;

      @container link-card (inline-size <= 640px) {
        grid-row: 1 / 2;
        grid-column: 1 / 2;
        aspect-ratio: 16/9;
      }
    }

    :where(.rlc-image) {
      inline-size: 100%;
      block-size: 100%;
      object-fit: cover;
      object-position: center;
      border-top-right-radius: 0.25rem;
      border-bottom-right-radius: 0.25rem;
    }

    :where(.twitter-tweet) {
      margin-block: unset !important;
      margin-inline: unset !important;
    }

    :where(.single-embed) {
      --_original-widget-width: 550px;

      display: var(--is-dark, none) var(--is-light, block);

      /* inline-sizeにfit-contentを使うとSafariで非表示になってしまう */
      max-inline-size: var(--_original-widget-width);
      margin-inline: auto;
      contain: content;
      border-radius: 13px;

      &[data-theme='dark'] {
        display: var(--is-dark, block) var(--is-light, none);
      }
    }

    :where(.single-comment) {
      --clamp-min: 12;
      --clamp-max: 12;

      display: block grid;
      grid-template-columns: auto 1fr;
      column-gap: 0.25rem;
    }

    :where(.single-comment) :where(svg) {
      block-size: 1lh;
    }
  }

  .single-share-buttons {
    display: block grid;
    grid-template-columns: repeat(3, minmax(0, 1fr));
    gap: 1rem;
    padding: 2rem;
    list-style-type: '';

    @container main (inline-size <= 710px) {
      display: revert;

      > :where(li + li) {
        margin-block-start: 0.5rem;
      }
    }
  }
</style>
